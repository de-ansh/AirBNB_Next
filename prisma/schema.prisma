// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?   @unique
  name      String?
  emailVerified DateTime? 
  image     String?
  hashedPassword String?
  favoriteIds String[]  @db.ObjectId
  accouts   Account[] 
  listings  Listing[]
  reservations Reservation[]

}

model Account {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String  @map("userId") @db.ObjectId
  type String
  provider String
  providerAccountId String
  refreshToken String? @db.String
  accessToken String? @db.String
  expiresAt Int? 
  
  token_type String?
  scope String?
  id_token String?
  session_state String?
  user      User?    @relation(fields: [userId], references: [id],onDelete: Cascade ) 
  @@unique([provider, providerAccountId])
}

model Listing {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String  @map("userId") @db.ObjectId
  title String
  description String
  image String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue Int
  price Int
  reservations Reservation[]
  user      User    @relation(fields: [userId], references: [id],onDelete: Cascade )

}

model Reservation {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String  @map("userId") @db.ObjectId
  listingId String  @map("listingId") @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  guest User? @relation(fields: [userId], references: [id],onDelete: Cascade ) 
  listing Listing? @relation(fields: [listingId], references: [id],onDelete: Cascade ) 
  @@unique([userId, listingId])
}
